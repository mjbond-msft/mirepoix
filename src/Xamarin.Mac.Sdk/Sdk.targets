<Project>
  <Import Sdk="Microsoft.NET.Sdk" Project="Sdk.targets"/>
  <Import
    Project="$(MSBuildExtensionsPath)\Xamarin\Mac\Xamarin.Mac.Common.targets"
    Condition="Exists('$(MSBuildExtensionsPath)\Xamarin\Mac\Xamarin.Mac.Common.targets')"/>

  <ItemGroup>
    <!--
      Should not be necessary but VS Mac (as of 8.3) shows <None> items
      even if the same item is in another item group that will be displayed
      in the solution pad. Microsoft.NET.SDK explicitly includes all files as
      <None> first, so we should remove items from the item groups we build
      up in Sdk.props.

      Even more annoying: while this is completely legimate MSBuild, VS Mac
      will not actually reflect this in the solution pad (it does not seem
      to be expanding the item group references).
      
      <None Remove="@(ImageAsset);@(InterfaceDefinition);@(BundleResource)" />

      Therefore, we have to keep the patterns in sync from Sdk.proj:
    -->
    <None Remove="**\*.xcassets\**\*"/>
    <None Remove="Resources\**\*"/>
    <None Remove="**\*.storyboard"/>
  </ItemGroup>

  <ItemGroup>
    <BundleResource Update="@(BundleResource)">
      <Link Condition="'$(Link)' == ''">Resources\%(RecursiveDir)%(Filename)%(Extension)</Link>
    </BundleResource>
  </ItemGroup>

  <PropertyGroup Condition="'$(_CanOutputAppBundle)' == 'true'">
    <AppBundleManifest Condition="'$(AppBundleManifest)' == ''">$(MSBuildProjectDirectory)\Info.plist</AppBundleManifest>
    <_AppManifest>$(AppBundleManifest)</_AppManifest>
    <IsPackable>false</IsPackable>
  </PropertyGroup>

  <!--
    Override the private Xamarin.Mac.Common.targets target to prevent searching through old item groups
    and just set the private _AppManifest property explicitly from AppBundleManifest or by convention.
  -->
  <Target Name="_DetectAppManifest">
    <Error
      Condition="'$(AppBundleManifest)' != '' And !Exists('$(AppBundleManifest)')"
      Text="Application manifest not found: '$(AppBundleManifest)'. An Info.plist application manifest should be placed in the same directory as the project file or explicitly provided through the 'AppBundleManifest' property."/>
  </Target>

  <!--
    Zips the .app bundle if 'ZipArchiveOnBuild' is 'true' and AppBundleDir exists and is a
    directory. Sets the 'AppBundleZipArchivePath' to the full path of the resulting zip file.
  -->
  <Target
    Name="ZipArchiveAppBundle"
    AfterTargets="Build"
    Condition="'$(ZipArchiveOnBuild)' == 'true' And Exists('$(AppBundleDir)') And !$([System.IO.File]::Exists('$(AppBundleDir)'))">
    <PropertyGroup>
      <_AppBundleOutputDir>$([System.IO.Path]::GetDirectoryName('$(AppBundleDir)'))\</_AppBundleOutputDir>
      <_AppBundleDirName>$([System.IO.Path]::GetFileName('$(AppBundleDir)'))</_AppBundleDirName>
      <_AppBundleZipArchiveFileName>$([System.IO.Path]::ChangeExtension('$(_AppBundleDirName)', '.zip'))</_AppBundleZipArchiveFileName>
      <AppBundleZipArchivePath>$(OutputPath)$(_AppBundleZipArchiveFileName)</AppBundleZipArchivePath>
    </PropertyGroup>
    <Delete Files="$(_AppBundleOutputDir)$(_AppBundleZipArchiveFileName)"/>
    <Exec
      WorkingDirectory="$(_AppBundleOutputDir)"
      Command="zip -q -1 -r &quot;$(_AppBundleZipArchiveFileName)&quot; &quot;$(_AppBundleDirName)&quot;"/>
  </Target>

  <Target
    Name="_ComputeTargetPathForRun"
    BeforeTargets="Run"
    DependsOnTargets="_GenerateBundleName"
    Condition="'$(_CanOutputAppBundle)' == 'true'">
    <PropertyGroup>
      <TargetPath>$(MSBuildProjectDirectory)\$(AppBundleDir)\Contents\MacOS\$([System.IO.Path]::GetFileNameWithoutExtension('$(AppBundleDir)'))</TargetPath>
    </PropertyGroup>
  </Target>
</Project>